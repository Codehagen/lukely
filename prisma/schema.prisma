
generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id
  email         String    @unique
  name          String?
  agent         Boolean   @default(false)
  emailVerified Boolean   @default(false)
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now()) @updatedAt

  // Relations
  sessions      Session[]
  accounts      Account[]
  workspaces    WorkspaceMember[]
  invitationsSent WorkspaceInvitation[]

  // Default workspace
  defaultWorkspaceId String?
  defaultWorkspace   Workspace? @relation("UserDefaultWorkspace", fields: [defaultWorkspaceId], references: [id], onDelete: SetNull)

  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Active workspace context
  activeWorkspaceId String?
  activeWorkspace   Workspace? @relation(fields: [activeWorkspaceId], references: [id], onDelete: SetNull)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("account")
}

model Verification {
  id         String   @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@map("verification")
}

// Workspace model for multi-tenancy
model Workspace {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  image       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  members     WorkspaceMember[]
  invitations WorkspaceInvitation[]
  sessions    Session[]
  defaultForUsers User[] @relation("UserDefaultWorkspace")
  calendars   Calendar[]

  @@map("workspace")
}

// Junction table for user-workspace relationship
model WorkspaceMember {
  id          String   @id @default(cuid())
  role        Role     @default(MEMBER)
  joinedAt    DateTime @default(now())

  // Relations
  userId      String
  workspaceId String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@unique([userId, workspaceId])
  @@index([workspaceId])
  @@index([userId])
  @@map("workspace_member")
}

// Workspace invitation model
model WorkspaceInvitation {
  id          String   @id @default(cuid())
  email       String
  role        Role     @default(MEMBER)
  token       String   @unique @default(cuid())
  expiresAt   DateTime
  acceptedAt  DateTime?
  createdAt   DateTime @default(now())

  // Relations
  workspaceId String
  invitedById String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  invitedBy   User      @relation(fields: [invitedById], references: [id])

  @@index([email])
  @@index([workspaceId])
  @@map("workspace_invitation")
}

// Role enum for workspace members
enum Role {
  OWNER
  ADMIN
  MEMBER
  VIEWER
}

// Calendar template types
enum CalendarType {
  CHRISTMAS
  VALENTINE
  EASTER
  CUSTOM
}

enum CalendarStatus {
  DRAFT
  SCHEDULED
  ACTIVE
  COMPLETED
  ARCHIVED
}

// Main calendar model
model Calendar {
  id              String          @id @default(cuid())
  title           String
  slug            String          @unique
  description     String?
  type            CalendarType
  status          CalendarStatus  @default(DRAFT)

  // Branding
  brandColor           String?
  logo                 String?
  bannerImage          String?
  buttonText           String?   @default("Delta n√•")
  thankYouMessage      String?   @default("Takk for din deltakelse!")
  footerText           String?
  favicon              String?
  metaDescription      String?

  // GDPR & Legal
  termsUrl             String?
  privacyPolicyUrl     String?

  // Dates
  startDate       DateTime
  endDate         DateTime

  // Configuration
  doorCount       Int
  allowMultipleEntries Boolean    @default(false)
  requireEmail    Boolean         @default(true)
  requireName     Boolean         @default(true)
  requirePhone    Boolean         @default(true)
  customFields    Json?

  // Quiz Configuration (calendar-level defaults)
  enableQuiz               Boolean  @default(false)
  defaultQuizPassingScore  Int      @default(80)
  defaultShowCorrectAnswers Boolean @default(false)
  defaultAllowRetry        Boolean  @default(false)
  aiQuizInstructions       String?

  // Relations
  workspaceId     String
  workspace       Workspace       @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  doors           Door[]
  leads           Lead[]
  views           CalendarView[]
  analyticsSummaries AnalyticsSummary[]

  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  @@index([workspaceId])
  @@index([slug])
  @@index([status])
  @@map("calendar")
}

// Individual doors/days in calendar
model Door {
  id              String          @id @default(cuid())
  doorNumber      Int
  openDate        DateTime

  // Door content
  title           String?
  description     String?
  image           String?

  // Quiz Configuration
  enableQuiz      Boolean         @default(false)
  quizPassingScore Int            @default(100)
  showCorrectAnswers Boolean      @default(false)
  allowRetry      Boolean         @default(false)

  // Relations
  calendarId      String
  calendar        Calendar        @relation(fields: [calendarId], references: [id], onDelete: Cascade)
  product         Product?
  entries         DoorEntry[]
  winner          Winner?
  doorViews       DoorView[]
  questions       Question[]

  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  @@unique([calendarId, doorNumber])
  @@index([calendarId])
  @@map("door")
}

// Products/prizes for each door
model Product {
  id              String          @id @default(cuid())
  name            String
  description     String?
  imageUrl        String?
  value           Float?
  quantity        Int             @default(1)

  // Relations
  doorId          String          @unique
  door            Door            @relation(fields: [doorId], references: [id], onDelete: Cascade)

  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  @@map("product")
}

// Lead data captured from users
model Lead {
  id              String          @id @default(cuid())
  email           String
  name            String?
  phone           String?
  customData      Json?

  // Tracking
  ipAddress       String?
  userAgent       String?

  // GDPR Consent
  marketingConsent        Boolean   @default(false)
  termsAccepted           Boolean   @default(false)
  privacyPolicyAccepted   Boolean   @default(false)
  consentTimestamp        DateTime?

  // Relations
  calendarId      String
  calendar        Calendar        @relation(fields: [calendarId], references: [id], onDelete: Cascade)
  entries         DoorEntry[]
  wins            Winner[]

  createdAt       DateTime        @default(now())

  @@index([calendarId])
  @@index([email])
  @@map("lead")
}

// Track which doors a lead has entered
model DoorEntry {
  id              String          @id @default(cuid())

  // Relations
  leadId          String
  doorId          String
  lead            Lead            @relation(fields: [leadId], references: [id], onDelete: Cascade)
  door            Door            @relation(fields: [doorId], references: [id], onDelete: Cascade)

  // Quiz results
  quizScore       Float?
  quizPassed      Boolean         @default(false)
  eligibleForWinner Boolean       @default(true)

  answers         QuestionAnswer[]

  enteredAt       DateTime        @default(now())

  @@unique([leadId, doorId])
  @@index([doorId])
  @@index([leadId])
  @@map("door_entry")
}

// Winner selections for each door
model Winner {
  id              String          @id @default(cuid())

  // Relations
  doorId          String          @unique
  leadId          String
  door            Door            @relation(fields: [doorId], references: [id], onDelete: Cascade)
  lead            Lead            @relation(fields: [leadId], references: [id], onDelete: Cascade)

  selectedAt      DateTime        @default(now())
  notified        Boolean         @default(false)
  notifiedAt      DateTime?

  @@index([leadId])
  @@map("winner")
}

// Analytics: Track calendar page views
model CalendarView {
  id           String   @id @default(cuid())
  calendarId   String
  calendar     Calendar @relation(fields: [calendarId], references: [id], onDelete: Cascade)

  // Visitor tracking
  visitorHash  String   // Hash of IP + UserAgent for unique visitor count
  ipAddress    String?
  userAgent    String?
  referrer     String?

  // Device/Browser info
  deviceType   String?  // mobile, desktop, tablet
  browser      String?  // chrome, safari, firefox, etc
  os           String?  // windows, macos, ios, android

  // Session tracking
  sessionId    String?
  duration     Int?     // seconds spent on page

  createdAt    DateTime @default(now())

  @@index([calendarId])
  @@index([visitorHash])
  @@index([createdAt])
  @@map("calendar_view")
}

// Analytics: Track individual door interactions
model DoorView {
  id           String     @id @default(cuid())
  doorId       String
  door         Door       @relation(fields: [doorId], references: [id], onDelete: Cascade)
  calendarId   String

  // Visitor tracking
  visitorHash  String
  sessionId    String?

  // Interaction type
  action       DoorAction

  createdAt    DateTime   @default(now())

  @@index([doorId])
  @@index([calendarId])
  @@index([visitorHash])
  @@index([createdAt])
  @@map("door_view")
}

enum DoorAction {
  VIEWED   // Door was visible in viewport
  CLICKED  // Door was clicked/opened
  ENTERED  // Entry was submitted
}

// Analytics: Daily aggregated summary (for performance)
model AnalyticsSummary {
  id              String   @id @default(cuid())
  calendarId      String
  calendar        Calendar @relation(fields: [calendarId], references: [id], onDelete: Cascade)
  date            DateTime @db.Date

  // Aggregated metrics
  totalViews      Int      @default(0)
  uniqueVisitors  Int      @default(0)
  totalEntries    Int      @default(0)

  // Device breakdown
  mobileViews     Int      @default(0)
  desktopViews    Int      @default(0)
  tabletViews     Int      @default(0)

  // Traffic sources
  directTraffic   Int      @default(0)
  socialTraffic   Int      @default(0)
  emailTraffic    Int      @default(0)
  otherTraffic    Int      @default(0)

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@unique([calendarId, date])
  @@index([calendarId])
  @@index([date])
  @@map("analytics_summary")
}

// Quiz questions for doors
model Question {
  id              String          @id @default(cuid())
  doorId          String
  door            Door            @relation(fields: [doorId], references: [id], onDelete: Cascade)

  type            QuestionType
  questionText    String          // Norwegian text
  order           Int
  required        Boolean         @default(true)
  points          Int             @default(1)

  // For validation
  correctAnswer   String?
  acceptableAnswers Json?
  caseSensitive   Boolean         @default(false)

  // Multiple choice options
  options         Json?

  // AI metadata
  generatedByAI   Boolean         @default(false)
  aiPrompt        String?

  createdAt       DateTime        @default(now())
  answers         QuestionAnswer[]

  @@index([doorId])
  @@map("question")
}

enum QuestionType {
  TEXT
  MULTIPLE_CHOICE
  TRUE_FALSE
  RATING
}

// Quiz answers from participants
model QuestionAnswer {
  id              String          @id @default(cuid())
  questionId      String
  question        Question        @relation(fields: [questionId], references: [id], onDelete: Cascade)
  doorEntryId     String
  doorEntry       DoorEntry       @relation(fields: [doorEntryId], references: [id], onDelete: Cascade)

  answer          String
  isCorrect       Boolean         @default(false)
  answeredAt      DateTime        @default(now())

  @@index([questionId])
  @@index([doorEntryId])
  @@map("question_answer")
}
