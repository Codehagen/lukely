
generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id
  email         String    @unique
  name          String?
  agent         Boolean   @default(false)
  emailVerified Boolean   @default(false)
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now()) @updatedAt

  // Relations
  sessions      Session[]
  accounts      Account[]
  workspaces    WorkspaceMember[]
  invitationsSent WorkspaceInvitation[]

  // Default workspace
  defaultWorkspaceId String?
  defaultWorkspace   Workspace? @relation("UserDefaultWorkspace", fields: [defaultWorkspaceId], references: [id], onDelete: SetNull)

  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Active workspace context
  activeWorkspaceId String?
  activeWorkspace   Workspace? @relation(fields: [activeWorkspaceId], references: [id], onDelete: SetNull)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("account")
}

model Verification {
  id         String   @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@map("verification")
}

// Workspace model for multi-tenancy
model Workspace {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  image       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  members     WorkspaceMember[]
  invitations WorkspaceInvitation[]
  sessions    Session[]
  defaultForUsers User[] @relation("UserDefaultWorkspace")
  calendars   Calendar[]

  @@map("workspace")
}

// Junction table for user-workspace relationship
model WorkspaceMember {
  id          String   @id @default(cuid())
  role        Role     @default(MEMBER)
  joinedAt    DateTime @default(now())

  // Relations
  userId      String
  workspaceId String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@unique([userId, workspaceId])
  @@index([workspaceId])
  @@index([userId])
  @@map("workspace_member")
}

// Workspace invitation model
model WorkspaceInvitation {
  id          String   @id @default(cuid())
  email       String
  role        Role     @default(MEMBER)
  token       String   @unique @default(cuid())
  expiresAt   DateTime
  acceptedAt  DateTime?
  createdAt   DateTime @default(now())

  // Relations
  workspaceId String
  invitedById String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  invitedBy   User      @relation(fields: [invitedById], references: [id])

  @@index([email])
  @@index([workspaceId])
  @@map("workspace_invitation")
}

// Role enum for workspace members
enum Role {
  OWNER
  ADMIN
  MEMBER
  VIEWER
}

// Calendar template types
enum CalendarType {
  CHRISTMAS
  VALENTINE
  EASTER
  CUSTOM
}

enum CalendarStatus {
  DRAFT
  SCHEDULED
  ACTIVE
  COMPLETED
  ARCHIVED
}

// Main calendar model
model Calendar {
  id              String          @id @default(cuid())
  title           String
  slug            String          @unique
  description     String?
  type            CalendarType
  status          CalendarStatus  @default(DRAFT)

  // Branding
  brandColor      String?
  logo            String?
  bannerImage     String?

  // Dates
  startDate       DateTime
  endDate         DateTime

  // Configuration
  doorCount       Int
  allowMultipleEntries Boolean    @default(false)
  requireEmail    Boolean         @default(true)
  requireName     Boolean         @default(true)
  requirePhone    Boolean         @default(false)
  customFields    Json?

  // Relations
  workspaceId     String
  workspace       Workspace       @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  doors           Door[]
  leads           Lead[]

  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  @@index([workspaceId])
  @@index([slug])
  @@index([status])
  @@map("calendar")
}

// Individual doors/days in calendar
model Door {
  id              String          @id @default(cuid())
  doorNumber      Int
  openDate        DateTime

  // Door content
  title           String?
  description     String?
  image           String?

  // Relations
  calendarId      String
  calendar        Calendar        @relation(fields: [calendarId], references: [id], onDelete: Cascade)
  product         Product?
  entries         DoorEntry[]
  winner          Winner?

  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  @@unique([calendarId, doorNumber])
  @@index([calendarId])
  @@map("door")
}

// Products/prizes for each door
model Product {
  id              String          @id @default(cuid())
  name            String
  description     String?
  imageUrl        String?
  value           Float?
  quantity        Int             @default(1)

  // Relations
  doorId          String          @unique
  door            Door            @relation(fields: [doorId], references: [id], onDelete: Cascade)

  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  @@map("product")
}

// Lead data captured from users
model Lead {
  id              String          @id @default(cuid())
  email           String
  name            String?
  phone           String?
  customData      Json?

  // Tracking
  ipAddress       String?
  userAgent       String?

  // Relations
  calendarId      String
  calendar        Calendar        @relation(fields: [calendarId], references: [id], onDelete: Cascade)
  entries         DoorEntry[]
  wins            Winner[]

  createdAt       DateTime        @default(now())

  @@index([calendarId])
  @@index([email])
  @@map("lead")
}

// Track which doors a lead has entered
model DoorEntry {
  id              String          @id @default(cuid())

  // Relations
  leadId          String
  doorId          String
  lead            Lead            @relation(fields: [leadId], references: [id], onDelete: Cascade)
  door            Door            @relation(fields: [doorId], references: [id], onDelete: Cascade)

  enteredAt       DateTime        @default(now())

  @@unique([leadId, doorId])
  @@index([doorId])
  @@index([leadId])
  @@map("door_entry")
}

// Winner selections for each door
model Winner {
  id              String          @id @default(cuid())

  // Relations
  doorId          String          @unique
  leadId          String
  door            Door            @relation(fields: [doorId], references: [id], onDelete: Cascade)
  lead            Lead            @relation(fields: [leadId], references: [id], onDelete: Cascade)

  selectedAt      DateTime        @default(now())
  notified        Boolean         @default(false)
  notifiedAt      DateTime?

  @@index([leadId])
  @@map("winner")
}
